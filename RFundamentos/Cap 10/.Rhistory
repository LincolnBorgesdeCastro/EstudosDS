1+1
install.packages('corrgram')
install.packages('corrplot')
library(corrplot)
library(corrgram)
library(corrplot)
library(corrgram)
install.packages('corrgram')
install.packages("caTools")
install.packages("C:/Downloads/corrgram_1.9/corrgram/R/corrgram", repos = NULL)
install.packages("C:/Downloads/corrgram_1.9/corrgram/R/corrgram", repos = NULL, lib="C:/Program Files/R/R-3.3.1/library")
install.packages("https://cran.rstudio.com/bin/windows/contrib/3.3/bitops_1.0-6.zip", repos = NULL, lib="C:/Program Files/R/R-3.3.1/library")
install.packages("https://cran.rstudio.com/bin/windows/contrib/3.3/caTools_1.17.1.zip", repos = NULL, lib="C:/Program Files/R/R-3.3.1/library")
install.packages("https://cran.rstudio.com/bin/windows/contrib/3.3/corrgram_1.9.zip", repos = NULL, lib="C:/Program Files/R/R-3.3.1/library")
library(corrgram)
library(corrplot)
library(corrgram)
install.packages('corrgram')
library(caret)
install.packages("caret")
# Este codigo contem comandos para filtrar e transformar os dados de aluguel de bikes, dados que estao em nosso dataset
# Este codigo foi criado para executar tanto no Azure, quanto no RStudio.
# Para executar no Azure, altere o valor da variavel Azure para TRUE. Se o valor for FALSE, o codigo sera executado no RStudio
# Configuracao do diretorio de trabalho
# setwd("/opt/DSA/MachineLearning/Azure/Regressao")
# Variavel que controla a execucao do script
Azure <- FALSE
# Execucao de acordo com o valor da variavel Azure
if(Azure){
source("src/Tools.R")
bikes <- maml.mapInputPort(1)
bikes$dteday <- set.asPOSIXct(bikes)
}else{
source("Tools.R")
bikes <- read.csv("bikes.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE )
## Selecionar as variaveis que serao usadas
cols <- c("dteday", "mnth", "hr", "holiday",
"workingday", "weathersit", "temp",
"hum", "windspeed", "cnt")
# Criando um subset dos dados
bikes <- bikes[, cols]
## Transformar o objeto de data
bikes$dteday <- char.toPOSIXct(bikes)
## Normalizar as variaveis preditoras numericas
cols <- c("temp", "hum", "windspeed")
bikes[, cols] <- scale(bikes[, cols])
}
#?scale
#str(bikes)
## Criar uma nova variavel para indicar dia da semana (workday)
bikes$isWorking <- ifelse(bikes$workingday & !bikes$holiday, 1, 0)
## Adicionar uma coluna com a quantidade de meses, o que vai ajudar a criar o modelo
bikes <- month.count(bikes)
## Criar um fator ordenado para o dia da semana, comecando por segunda-feira
## Neste fator eh convertido para ordenado numerico para ser compativel com os tipos de dados do Azure ML
bikes$dayWeek <- as.factor(ordered(weekdays(bikes$dteday),
labels = c("Monday",
"Tuesday",
"Wednesday",
"Thursday",
"Friday",
"Saturday",
"Sunday")))
bikes$dayWeek <- as.numeric(ordered(bikes$dayWeek,
levels = c("Monday",
"Tuesday",
"Wednesday",
"Thursday",
"Friday",
"Saturday",
"Sunday")))
# str(bikes)
## Adiciona uma variavel com valores unicos para o horario do dia para dias da semana e dias de fim de semana
## Com isso diferenciamos as horas dos dias da semana, das horas em dias de fim de semana
bikes$workTime <- ifelse(bikes$isWorking, bikes$hr, bikes$hr + 24)
## Transforma os valores de hora na madrugada, quando a demanda por bibicletas eh praticamente nula
bikes$xformHr <- ifelse(bikes$hr > 4, bikes$hr - 5, bikes$hr + 19)
## Adiciona uma variavel com valores unicos para o horario do dia para dias da semana e dias de fim de semana
bikes$xformWorkHr <- ifelse(bikes$isWorking, bikes$xformHr, bikes$xformHr + 24)
# str(bikes)
## Gera saida no Azure ML
if(Azure) maml.mapOutputPort('bikes')
str(bikes)
"Tuesday",
# Este codigo contem comandos para filtrar e transformar os dados de aluguel de bikes, dados que estao em nosso dataset
# Este codigo foi criado para executar tanto no Azure, quanto no RStudio.
# Para executar no Azure, altere o valor da variavel Azure para TRUE. Se o valor for FALSE, o codigo sera executado no RStudio
# Configuracao do diretorio de trabalho
# setwd("/opt/DSA/MachineLearning/Azure/Regressao")
# Variavel que controla a execucao do script
Azure <- FALSE
# Execucao de acordo com o valor da variavel Azure
if(Azure){
source("src/Tools.R")
bikes <- maml.mapInputPort(1)
bikes$dteday <- set.asPOSIXct(bikes)
}else{
source("Tools.R")
bikes <- read.csv("bikes.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE )
## Selecionar as variaveis que serao usadas
cols <- c("dteday", "mnth", "hr", "holiday",
"workingday", "weathersit", "temp",
"hum", "windspeed", "cnt")
# Criando um subset dos dados
bikes <- bikes[, cols]
## Transformar o objeto de data
bikes$dteday <- char.toPOSIXct(bikes)
## Normalizar as variaveis preditoras numericas
cols <- c("temp", "hum", "windspeed")
bikes[, cols] <- scale(bikes[, cols])
}
#?scale
#str(bikes)
## Criar uma nova variavel para indicar dia da semana (workday)
bikes$isWorking <- ifelse(bikes$workingday & !bikes$holiday, 1, 0)
## Adicionar uma coluna com a quantidade de meses, o que vai ajudar a criar o modelo
bikes <- month.count(bikes)
## Criar um fator ordenado para o dia da semana, comecando por segunda-feira
## Neste fator eh convertido para ordenado numerico para ser compativel com os tipos de dados do Azure ML
bikes$dayWeek <- as.factor(ordered(weekdays(bikes$dteday),
labels = c("Monday",
"Tuesday",
"Wednesday",
"Thursday",
"Friday",
"Saturday",
"Sunday")))
bikes$dayWeek <- as.numeric(ordered(bikes$dayWeek,
levels = c("Monday",
"Tuesday",
"Wednesday",
"Thursday",
"Friday",
"Saturday",
"Sunday")))
# str(bikes)
## Adiciona uma variavel com valores unicos para o horario do dia para dias da semana e dias de fim de semana
## Com isso diferenciamos as horas dos dias da semana, das horas em dias de fim de semana
bikes$workTime <- ifelse(bikes$isWorking, bikes$hr, bikes$hr + 24)
## Transforma os valores de hora na madrugada, quando a demanda por bibicletas eh praticamente nula
bikes$xformHr <- ifelse(bikes$hr > 4, bikes$hr - 5, bikes$hr + 19)
## Adiciona uma variavel com valores unicos para o horario do dia para dias da semana e dias de fim de semana
bikes$xformWorkHr <- ifelse(bikes$isWorking, bikes$xformHr, bikes$xformHr + 24)
# str(bikes)
## Gera saida no Azure ML
if(Azure) maml.mapOutputPort('bikes')
bikes <- read.csv("bikes.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE )
setwd("D:/RFundamentos/Cap 10")
source("Tools.R")
bikes <- read.csv("bikes.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE )
## Selecionar as variaveis que serao usadas
cols <- c("dteday", "mnth", "hr", "holiday",
"workingday", "weathersit", "temp",
"hum", "windspeed", "cnt")
# Criando um subset dos dados
bikes <- bikes[, cols]
## Transformar o objeto de data
bikes$dteday <- char.toPOSIXct(bikes)
## Normalizar as variaveis preditoras numericas
cols <- c("temp", "hum", "windspeed")
bikes[, cols] <- scale(bikes[, cols])
#?scale
#str(bikes)
## Criar uma nova variavel para indicar dia da semana (workday)
bikes$isWorking <- ifelse(bikes$workingday & !bikes$holiday, 1, 0)
## Adicionar uma coluna com a quantidade de meses, o que vai ajudar a criar o modelo
bikes <- month.count(bikes)
## Criar um fator ordenado para o dia da semana, comecando por segunda-feira
## Neste fator eh convertido para ordenado numerico para ser compativel com os tipos de dados do Azure ML
bikes$dayWeek <- as.factor(ordered(weekdays(bikes$dteday),
labels = c("Monday",
"Tuesday",
"Wednesday",
"Thursday",
"Friday",
"Saturday",
"Sunday")))
bikes$dayWeek <- as.numeric(ordered(bikes$dayWeek,
levels = c("Monday",
"Tuesday",
"Wednesday",
"Thursday",
"Friday",
"Saturday",
"Sunday")))
# str(bikes)
## Adiciona uma variavel com valores unicos para o horario do dia para dias da semana e dias de fim de semana
## Com isso diferenciamos as horas dos dias da semana, das horas em dias de fim de semana
bikes$workTime <- ifelse(bikes$isWorking, bikes$hr, bikes$hr + 24)
## Transforma os valores de hora na madrugada, quando a demanda por bibicletas eh praticamente nula
bikes$xformHr <- ifelse(bikes$hr > 4, bikes$hr - 5, bikes$hr + 19)
## Adiciona uma variavel com valores unicos para o horario do dia para dias da semana e dias de fim de semana
bikes$xformWorkHr <- ifelse(bikes$isWorking, bikes$xformHr, bikes$xformHr + 24)
# str(bikes)
## Gera saida no Azure ML
if(Azure) maml.mapOutputPort('bikes')
bikes <- bikes
str(bikes)
# Verificando a correlacao entre as variaveis preditoras
bikes$count <- bikes$cnt - predict(lm(cnt ~ dteday, data = bikes), newdata = bikes)
cols <- c("mnth", "hr", "holiday", "workingday",
"weathersit", "temp", "hum", "windspeed",
"isWorking", "monthCount", "dayWeek",
"workTime", "xformHr", "count")
# Metodos de Correlacao
# Pearson - coeficiente usado para medir o grau de relacionamento entre duas variaveis com relacao linear
# Spearman - eh um teste nao parametrico, para medir o grau de relacionamento entre duas variaveis
# Kendall - eh um teste nao parametrico, para medir a forca de dependencia entre duas variaveis
metodos <- c("pearson", "spearman")
cors <- lapply( metodos, function(method)
(cor(bikes[, cols], method = method)))
head(cors)
require(lattice)
plot.cors <- function(x, labs){
diag(x) <- 0.0
plot( levelplot(x,
main = paste("Plot de CorrelaÃ§Ã£o usando MÃ©todo", labs),
scales = list(x = list(rot = 90), cex = 1.0)) )
}
Map(plot.cors, cors, metodos)
## Gera saida no Azure ML
if(Azure) maml.mapOutputPort('bikes')
## Avaliando a demanda por aluguel de bikes ao longo do tempo
## Construindo um time series plot para alguns determinados horarios em dias uteis e dias de fim de semana
times <- c(7, 9, 12, 15, 18, 20, 22)
tms.plot <- function(times){
ggplot(bikes[bikes$workTime == times, ],
aes(x = dteday, y = cnt)) +
geom_line() +
ylab("Numero de Bikes") +
labs(title = paste("Demanda de Bikes as ",
as.character(times), ":00", sep = "")) +
theme(text = element_text(size = 20))
}
require(ggplot2)
lapply(times, tms.plot)
## Gera saida no Azure ML
if(Azure) maml.mapOutputPort('bikes')
bikes$dayWeek <- fact.conv(bikes$dayWeek)
labels <- list("Boxplots - Demanda de Bikes por Hora",
"Boxplots - Demanda de Bikes por EstaÃ§Ã£o",
"Boxplots - Demanda de Bikes por Dia Ãštil",
"Boxplots - Demanda de Bikes por Dia da Semana")
xAxis <- list("hr", "weathersit", "isWorking", "dayWeek")
plot.boxes  <- function(X, label){
ggplot(bikes, aes_string(x = X,
y = "cnt",
group = X)) +
geom_boxplot( ) + ggtitle(label) +
theme(text = element_text(size = 18)) }
Map(plot.boxes, xAxis, labels)
## Visualizando o relacionamento entre as variaveis preditoras e demanda por bike
labels <- c("Demanda de Bikes vs Temperatura",
"Demanda de Bikes vs Humidade",
"Demanda de Bikes vs Velocidade do Vento",
"Demanda de Bikes vs Hora")
xAxis <- c("temp", "hum", "windspeed", "hr")
plot.scatter <- function(X, label){
ggplot(bikes, aes_string(x = X, y = "cnt")) +
geom_point(aes_string(colour = "cnt"), alpha = 0.1) +
scale_colour_gradient(low = "green", high = "blue") +
geom_smooth(method = "loess") +
ggtitle(label) +
theme(text = element_text(size = 20)) }
Map(plot.scatter, xAxis, labels)
## Explorando a interacao entre tempo e dia em dias da semana e fins de semana
labels <- list("Box plots - Demanda por Bikes as 09:00 para \n dias da semana e fins de semana",
"Box plots - Demanda por Bikes as 18:00  para \n dias da semana e fins de semana")
Times <- list(9, 18)
plot.box2 <- function(time, label){
ggplot(bikes[bikes$hr == time, ],
aes(x = isWorking, y = cnt, group = isWorking)) +
geom_boxplot( ) + ggtitle(label) +
theme(text = element_text(size = 18)) }
Map(plot.box2, Times, labels)
Map(plot.box2, Times, labels)
